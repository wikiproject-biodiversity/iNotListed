name: Run Script on Issue Form Submission

on:
  issues:
    types: [opened]

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install requests tqdm matplotlib

      - name: Parse issue and extract parameters
        id: parse-issue
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "$ISSUE_BODY" > issue_content.txt

          # Function to extract the first non-empty line after a label
          get_field() {
            local label="$1"
            awk -v label="$label" '
              $0 ~ label {found=1; next}
              found && $0 ~ /[^[:space:]]/ {print; exit}
            ' <<< "$ISSUE_BODY"
          }

          USERNAME=$(get_field "iNaturalist Username")
          PROJECT_ID=$(get_field "iNaturalist Project ID")
          COUNTRY_CODE=$(get_field "iNaturalist Country/Place ID")

          # Extract checked languages
          LANG_LINES=$(grep -E '^\s*-\s*\[[xX]\]\s*[A-Za-z]{1,6}' <<< "$ISSUE_BODY" || true)
          CLEAN_LANGS=$(awk '{gsub(/\[x\]|\[X\]/,""); print $1}' <<< "$LANG_LINES" | tr '\n' ',' | sed 's/,$//')

          # Fallback if no language is selected
          if [[ -z "$CLEAN_LANGS" ]]; then
            CLEAN_LANGS="en,es,ja"
          fi

          echo "username=$USERNAME" >> $GITHUB_ENV
          echo "project_id=$PROJECT_ID" >> $GITHUB_ENV
          echo "country_code=$COUNTRY_CODE" >> $GITHUB_ENV
          echo "languages=$CLEAN_LANGS" >> $GITHUB_ENV

      - name: Run iNotWiki.py and capture report path
        run: |
          ISSUE_FOLDER="reports/issue-${{ github.event.issue.number }}"
          mkdir -p "$ISSUE_FOLDER"

          if [[ -n "$username" ]]; then
              REPORT_PATH=$(python iNotWiki.py --username "$username" --languages "$languages" --output-folder "$ISSUE_FOLDER")
          elif [[ -n "$project_id" ]]; then
              REPORT_PATH=$(python iNotWiki.py --project_id "$project_id" --languages "$languages" --output-folder "$ISSUE_FOLDER")
          elif [[ -n "$country_code" ]]; then
              REPORT_PATH=$(python iNotWiki.py --country_id "$country_code" --languages "$languages" --output-folder "$ISSUE_FOLDER")
          else
              DEFAULT_PROJECT_ID="biohackathon-2025"
              REPORT_PATH=$(python iNotWiki.py --project_id "$DEFAULT_PROJECT_ID" --languages "$languages" --output-folder "$ISSUE_FOLDER")
          fi

          # Safe export to GITHUB_ENV
          echo "REPORT_PATH<<EOF" >> $GITHUB_ENV
          echo "$REPORT_PATH" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload generated report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: missing-wikipedia-report
          path: reports/issue-${{ github.event.issue.number }}/

      - name: Commit report folder to repository
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add reports/issue-${{ github.event.issue.number }}
          git commit -m "Add report for issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push

      - name: Post Markdown report as issue comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "$REPORT_PATH" ]; then
            COMMENT_BODY=$(sed 's/"/\\"/g' "$REPORT_PATH" | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
              -d "{\"body\": \"$COMMENT_BODY\"}"
          else
            echo "‚ùå No report file found. Skipping comment."
          fi
